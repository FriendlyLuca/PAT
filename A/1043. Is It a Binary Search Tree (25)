/*
1043. Is It a Binary Search Tree (25)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
16000 B
判题程序 
Standard 
作者 
CHEN, Yue
A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:
The left subtree of a node contains only nodes with keys less than the node's key. 
The right subtree of a node contains only nodes with keys greater than or equal to the node's key. 
Both the left and right subtrees must also be binary search trees. 
If we swap the left and right subtrees of every node, then the resulting tree is called the Mirror Image of a BST.
Now given a sequence of integer keys, you are supposed to tell if it is the preorder traversal sequence of a BST or the mirror image of a BST.
Input Specification: 
Each input file contains one test case. For each case, the first line contains a positive integer N (<=1000). Then N integer keys are given in the next line. All the numbers in a line are separated by a space.
Output Specification: 
For each test case, first print in a line "YES" if the sequence is the preorder traversal sequence of a BST or the mirror image of a BST, or "NO" if not. Then if the answer is "YES", print in the next line the postorder traversal sequence of that tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line. 
Sample Input 1:
7
8 6 5 7 10 8 11
Sample Output 1:
YES
5 7 6 8 11 10 8
Sample Input 2:
7
8 10 11 8 6 7 5
Sample Output 2:
YES
11 8 10 7 5 6 8
Sample Input 3:
7
8 6 8 5 10 9 11
Sample Output 3:
NO
*/


#include<cstdio>
#include<vector>
using namespace std;
struct node{
	int data;
	node* lchild;
	node* rchild;
};
void insert(node* &root,int data){
	if (root==NULL){
		root=new node;
		root->lchild=NULL;
		root->rchild=NULL;
		root->data=data;
		return;
	}
	if (data<root->data){
		insert(root->lchild,data);
	}
	if (data>=root->data){
		insert(root->rchild,data);
	}
}
void preorder(node* root,vector<int>&vi){
	if (root==NULL) return;
	vi.push_back(root->data);
	preorder(root->lchild,vi);
	preorder(root->rchild,vi);
}
void postorder(node* root,vector<int>&vi){
	if (root==NULL) return;
	postorder(root->lchild,vi);
	postorder(root->rchild,vi);
	vi.push_back(root->data);
}
//要理解镜像二叉搜索树就是改变了每次访问左右子树的顺序而已，明白了之后会容易很多
void mpreorder(node* root,vector<int>&vi){
	if (root==NULL) return;
	vi.push_back(root->data);
	mpreorder(root->rchild,vi);
	mpreorder(root->lchild,vi);
}
void mpostorder(node* root,vector<int>&vi){
	if (root==NULL) return;
	mpostorder(root->rchild,vi);
	mpostorder(root->lchild,vi);
	vi.push_back(root->data);
}
int main(){
	int n;
	node* root=NULL;//一开始定义根节点直接定义为NULL，别搞错了。因为根节点的初始化已经在insert函数里写了，所以不要在这里再new node一次
	vector<int> pre,post,mpre,mpost,now;//这里向量命名不能和函数一样，不然会错
	scanf("%d",&n);
	int data;
	for (int i=0;i<n;i++){
		scanf("%d",&data);
		now.push_back(data);
		insert(root,data);
	}
	preorder(root,pre);
	postorder(root,post);
	mpreorder(root,mpre);
	mpostorder(root,mpost);
	if (now!=pre&&now!=mpre)
		printf("NO");
	else if (now==pre){
		printf("YES\n");
		for (int i=0;i<post.size();i++){
			printf("%d",post[i]);
			if (i<post.size()-1)
				printf(" ");
		}
	}
	else {
		printf("YES\n");
		for (int i=0;i<mpost.size();i++){
			printf("%d",mpost[i]);
			if (i<mpost.size()-1)
				printf(" ");
		}			
	}
	return 0;
}
