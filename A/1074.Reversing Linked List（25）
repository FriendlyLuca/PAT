/*
1074 Reversing Linked List（25 分）
Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L. For example, given L being 1→2→3→4→5→6, if K=3, then you must output 3→2→1→6→5→4; if K=4, you must output 4→3→2→1→5→6.
Input Specification:
Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤10
​5
​​) which is the total number of nodes, and a positive K (≤N) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.
Then N lines follow, each describes a node in the format:
Address Data Next
where Address is the position of the node, Data is an integer, and Next is the position of the next node.
Output Specification:
For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.
Sample Input:
00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218
Sample Output:
00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1
*/

#include<cstdio>
#include<algorithm>
using namespace std;
struct node{
	int d,ad;
	int order;
	int next;
}nod[100010];
bool cmp(node a,node b){
	return a.order<b.order;
}
bool cmpf(node a,node b){
	return a.order>b.order;
}
int main(){
	int a,n,m;
	int x,data,z;
	for (int i=0;i<100010;i++){
	  nod[i].order=100010;
	}
	scanf("%d %d %d",&a,&n,&m);
	for (int i=0;i<n;i++){
		scanf("%d %d %d",&x,&data,&z);
		nod[x].d=data;
		nod[x].ad=x;
		nod[x].next=z;
	}
	for (int i=0;a!=-1;i++){//有可能有无效结点，故需要将循环条件设置为a!=-1
		nod[a].order=i;
		a=nod[a].next;
	}
	sort(nod,nod+100010,cmp);
	for (int i=0;i<n;i++){//重新统计n的个数
		if (nod[i].order==100010){
			n=i;
			break;
		}
	}
	for (int i=0;i<n/m;i++)
		sort(nod+i*m,nod+i*m+m,cmpf);
	for (int i=0;i<n-1;i++){
		printf("%05d %d %05d\n",nod[i].ad,nod[i].d,nod[i+1].ad);
	}
	printf("%05d %d -1\n",nod[n-1].ad,nod[n-1].d);
	return 0;
}

