/*
1067 Sort with Swap(0,*) (25)（25 分）
Given any permutation of the numbers {0, 1, 2,..., N-1}, it is easy to sort them in increasing order. But what if Swap(0, *) is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:
Swap(0, 1) => {4, 1, 2, 0, 3}\ Swap(0, 3) => {4, 1, 2, 3, 0}\ Swap(0, 4) => {0, 1, 2, 3, 4}
Now you are asked to find the minimum number of swaps need to sort the given permutation of the first N nonnegative integers.
Input Specification:
Each input file contains one test case, which gives a positive N (<=10^5^) followed by a permutation sequence of {0, 1, ..., N-1}. All the numbers in a line are separated by a space.
Output Specification:
For each case, simply print in a line the minimum number of swaps need to sort the given permutation.
Sample Input:
10 3 5 7 2 6 4 9 0 8 1
Sample Output:
9
*/

#include<stdio.h>
#include<algorithm>
using namespace std;
int main(){
	int n;
	scanf("%d",&n);
	int sz[100010];
	for (int i=0;i<n;i++){
		int pos;
		scanf("%d",&pos);
		sz[pos]=i;
	}
	int time=0;
	int left=0;
	for (int i=1;i<n;i++){//一定是除0以外的不在本位上的数比较好想
		if (sz[i]!=i)
			left++;
	}
	int tem=1;
	while(left){
		if (sz[0]){
			swap(sz[0],sz[sz[0]]);
			time++;
			left--;
		}else{
			for (int j=tem;j<n;j++){//这里要寻找第一个不在本位的数，如果每次从1开始找就会超时，应该记住上次找的位置继续往下找
				if (sz[j]!=j){
					sz[0]=sz[j];
					sz[j]=0;
					tem=j+1;
					time++;
					break;
				}
			}
		}
	}
	printf("%d",time);
	return 0;
}
