/*
1086. Tree Traversals Again (25)
时间限制 
200 ms
内存限制 
65536 kB
代码长度限制 
16000 B
判题程序 
Standard 
作者 
CHEN, Yue
An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree. 

Figure 1
Input Specification: 
Each input file contains one test case. For each case, the first line contains a positive integer N (<=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N). Then 2N lines follow, each describes a stack operation in the format: "Push X" where X is the index of the node being pushed onto the stack; or "Pop" meaning to pop one node from the stack.
Output Specification: 
For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line. 
Sample Input:
6
Push 1
Push 2
Push 3
Pop
Pop
Push 4
Pop
Pop
Push 5
Push 6
Pop
Pop
Sample Output:
3 4 2 6 5 1

提交代码 

版权所有
*/

#include<stdio.h>
#include<stack>
#include<vector>
#include<string.h>
using namespace std;
const int maxn=50;
struct node{
	int data;
	node* lchild;
	node* rchild;
};
int in[maxn],pre[maxn];
int post[maxn];
int n;
stack<int> s;
node* create(int prel,int prer,int inl,int inr){
	if (prel>prer)
		return NULL;
	node* root=new node;
	root->data=pre[prel];
	int temp;
	for (int i=inl;i<=inr;i++){
		if (pre[prel]==in[i])
			temp=i;
	}
	int numl=temp-inl;
	root->lchild=create(prel+1,prel+numl,inl,temp-1);//temp是指在in中的根节点位置，每次都搞成pre的第一个，其实根本不等同！！！
	root->rchild=create(prel+numl+1,prer,temp+1,inr);
	return root;
}
int ni=0;
void postorder(node* root){
	if (root==NULL)
		return;
	postorder(root->lchild);
	postorder(root->rchild);
	printf("%d",root->data);
	ni++;
	if (ni<n)
		printf(" ");
}
int main(){
	scanf("%d",&n);
	char str[5];
	int x;
	int prex=0;
	int inx=0;
	for(int i=0;i<2*n;i++){
		scanf("%s",str);
		if (strcmp(str,"Push")==0){
			scanf("%d",&x);
			s.push(x);
			pre[prex]=x;
			prex++;
		}else{
			x=s.top();
			s.pop();
			in[inx]=x;
			inx++;
		}
	}
	node* root=create(0,n-1,0,n-1);
	postorder(root);
	return 0;
}
