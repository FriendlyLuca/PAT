/*
1056 Mice and Rice（25 分）
Mice and Rice is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse in a given map. The goal of each mouse is to eat as much rice as possible in order to become a FatMouse.
First the playing order is randomly decided for N
​P
​​ programmers. Then every N
​G
​​ programmers are grouped in a match. The fattest mouse in a group wins and enters the next turn. All the losers in this turn are ranked the same. Every N
​G
​​ winners are then grouped in the next match until a final winner is determined.
For the sake of simplicity, assume that the weight of each mouse is fixed once the programmer submits his/her code. Given the weights of all the mice and the initial playing order, you are supposed to output the ranks for the programmers.
Input Specification:
Each input file contains one test case. For each case, the first line contains 2 positive integers: N
​P
​​ and N
​G
​​ (≤1000), the number of programmers and the maximum number of mice in a group, respectively. If there are less than N
​G
​​ mice at the end of the player's list, then all the mice left will be put into the last group. The second line contains N
​P
​​ distinct non-negative numbers W
​i
​​ (i=0,⋯,N
​P
​​−1) where each W
​i
​​ is the weight of the i-th mouse respectively. The third line gives the initial playing order which is a permutation of 0,⋯,N
​P
​​−1 (assume that the programmers are numbered from 0 to N
​P
​​−1). All the numbers in a line are separated by a space.
Output Specification:
For each test case, print the final ranks in a line. The i-th number is the rank of the i-th programmer, and all the numbers must be separated by a space, with no extra space at the end of the line.
Sample Input:
11 3
25 18 0 46 37 3 19 22 57 56 10
6 0 8 7 10 5 9 1 4 2 3
Sample Output:
5 5 5 2 5 5 5 3 1 3 5
*/

#include<queue>
#include<cstdio>
using namespace std;
struct mou{
	int rank;
	int wei;
}m[1010];
int main(){
	int p,g,w;
	scanf("%d %d",&p,&g);
	for (int i=0;i<p;i++){
		scanf("%d",&w);
		m[i].wei=w;
	}
	queue<int> q;
	for (int i=0;i<p;i++){
		scanf("%d",&w);
		q.push(w);
	}
	int tem=p;
	int group;
	while (q.size()!=1){
		if (tem%g==0)
		group=tem/g;
	else
		group=tem/g+1;
		for (int i=0;i<group;i++){
			int k=q.front();
			for (int j=0;j<g&&i*g+j<tem;j++){
				int front=q.front();
				if (m[front].wei>m[k].wei){
					k=front;
				}
				m[front].rank=group+1;
				q.pop();
			}
			q.push(k);
		}
		tem=group;
	}
	m[q.front()].rank=1;
	for (int i=0;i<p;i++){
		printf("%d",m[i].rank);
		if (i<p-1)
			printf(" ");
	}
	return 0;
}
