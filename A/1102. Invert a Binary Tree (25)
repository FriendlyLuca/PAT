/*
1102. Invert a Binary Tree (25)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
16000 B
判题程序 
Standard 
作者 
CHEN, Yue
The following is from Max Howell @twitter:
Google: 90% of our engineers use the software you wrote (Homebrew), but you can't invert a binary tree on a whiteboard so fuck off.
Now it's your turn to prove that YOU CAN invert a binary tree!
Input Specification: 
Each input file contains one test case. For each case, the first line gives a positive integer N (<=10) which is the total number of nodes in the tree -- and hence the nodes are numbered from 0 to N-1. Then N lines follow, each corresponds to a node from 0 to N-1, and gives the indices of the left and right children of the node. If the child does not exist, a "-" will be put at the position. Any pair of children are separated by a space.
Output Specification: 
For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.
Sample Input:
8
1 -
- -
0 -
2 7
- -
- -
5 -
4 6
Sample Output:
3 7 2 6 4 0 5 1
6 5 7 4 3 2 0 1

提交代码 
*/


#include<cstdio>
#include<queue>
using namespace std;
int n;
queue<int> q;
struct node{//由于是静态二叉树可以不要值，结点数组下标就是其值
	int lchild;
	int rchild;
	int flag;
}jd[10];
int num=0;
void fin(int root){
	if (root==-1)
		return;
	fin(jd[root].rchild);
	printf("%d",root);
	if(num<n-1)
		printf(" ");
	num++;
	fin(jd[root].lchild);
}
void level(int root){
	q.push(root);
	while(!q.empty()){
		printf("%d",q.front());
		if (jd[q.front()].rchild!=-1)
			q.push(jd[q.front()].rchild);
		if (jd[q.front()].lchild!=-1)
			q.push(jd[q.front()].lchild);
		q.pop();
		if (!q.empty())
			printf(" ");
		else
			printf("\n");
	}
}
int main(){
	scanf("%d",&n);
	char v1,v2;
	for (int i=0;i<n;i++){
		jd[i].flag=0;
	}
	for (int i=0;i<n;i++){
		scanf("%*c%c %c",&v1,&v2);//由于scanf("%c")会读取\n，顾前面要加个%*c来中和掉换行符
		if (v1=='-'&&v2=='-'){
			jd[i].lchild=-1;
			jd[i].rchild=-1;
			jd[i].flag=2;
		}else {
			if (v1=='-')
				jd[i].lchild=-1;
			else{
				jd[i].lchild=(int)(v1-'0');
				jd[v1-'0'].flag=1;
			}
			if (v2=='-')
				jd[i].rchild=-1;
			else{
				jd[i].rchild=(int)(v2-'0');
				jd[v2-'0'].flag=1;
			}
		}
	}
	int temp;
	for (int i=0;i<n;i++){
		if(jd[i].flag==0){
			temp=i;
			break;
		}
	}
	level(temp);
	fin(temp);
}
