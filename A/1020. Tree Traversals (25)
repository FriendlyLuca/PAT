/*
1020. Tree Traversals (25)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
16000 B
判题程序 
Standard 
作者 
CHEN, Yue
Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.
Input Specification: 
Each input file contains one test case. For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.
Output Specification: 
For each test case, print in one line the level order traversal sequence of the corresponding binary tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.
Sample Input:
7
2 3 1 5 7 6 4
1 2 3 4 5 6 7
Sample Output:
4 1 6 3 5 7 2

提交代码 


*/
#include<cstdio>
#include<vector>
#include<queue>
using namespace std;
queue<int> q;
struct node{
	int data;
	node* lchild;
	node* rchild;
};
int post[31],in[31];
node* creat(int postl,int postr,int inl,int inr){
	if (postl>postr)
		return NULL;
	node* root=new node;
	root->data=post[postr];
	int temp;
	for (int i=inl;i<=inr;i++){
		if (in[i]==post[postr]){
			temp=i;
			break;
		}
	}
	int numleft=temp-inl;//这里最好设置一个变量来记录左子树结点个数，不然下一步的新的postl,postr很容易搞错！
	root->lchild=creat(postl,numleft+postl,inl,temp-1);
	root->rchild=creat(postl+numleft,postr-1,temp+1,inr);
	return root;
}
void bfs(node* root,int n){
	queue <node*>q;//这里是存储node的地址，要记得层序遍历的这个套路！
	q.push(root);
	while(!q.empty()){
		node* now=q.front();
		q.pop();
		printf("%d",now->data);
		n--;
		if (n)
			printf(" ");
		if (now->lchild!=NULL)
			q.push(now->lchild);
		if (now->rchild!=NULL)
			q.push(now->rchild);
	}
}
int main(){
	int n;
	scanf("%d",&n);
	int v;
	for (int i=0;i<n;i++){
		scanf("%d",&post[i]);
	}
	for (int i=0;i<n;i++){
		scanf("%d",&in[i]);
	}
	node* root=creat(0,n-1,0,n-1);
	bfs(root,n);
	return 0;
}
