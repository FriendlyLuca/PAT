/*
1004 Counting Leaves（30 分）
A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.
Input Specification:
Each input file contains one test case. Each case starts with a line containing 0<N<100, the number of nodes in a tree, and M (<N), the number of non-leaf nodes. Then M lines follow, each in the format:
ID K ID[1] ID[2] ... ID[K]
where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake of simplicity, let us fix the root ID to be 01.
The input ends with N being 0. That case must NOT be processed.
Output Specification:
For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.
The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line.
Sample Input:
2 1
01 1 02
Sample Output:
0 1
*/

#include<cstdio>
#include<queue>
#include<vector>
using namespace std;
int n,m;
struct node{
	vector<int> child;
	int g;
	int flag;
	node(){
		flag=0;
	}
}nod[110];
void cx(){
	queue<int>q;
	q.push(1);
	nod[1].g=0;
	int maxg=0;
	while(!q.empty()){
		int f=q.front();
		if (nod[f].child.size()>0){
			for (int i=0;i<nod[f].child.size();i++){
				nod[nod[f].child[i]].g=nod[f].g+1;
				q.push(nod[f].child[i]);
			}
		}
		q.pop();
	}
	for (int i=1;i<=n;i++){
		if (maxg<nod[i].g)
			maxg=nod[i].g;
	}
	int nm;
	for (int i=0;i<=maxg;i++){
		nm=0;
		for (int j=1;j<=n;j++){//要注意根节点是从1开始的
			if (nod[j].g==i&&nod[j].flag==0)
				nm++;
		}
		printf("%d",nm);
		if (i<maxg)
			printf(" ");
	}
}
int main(){
	scanf("%d %d",&n,&m);
	for (int i=0;i<m;i++){
		int id,num,c;
		scanf("%d %d",&id,&num);
		nod[id].flag=1;
		for (int j=0;j<num;j++){
			scanf("%d",&c);
			nod[id].child.push_back(c);
		}
	}
	cx();
	return 0;
}
