/*
1086 Tree Traversals Again（25 分）
An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.

Figure 1 
Input Specification:
Each input file contains one test case. For each case, the first line contains a positive integer N (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N). Then 2N lines follow, each describes a stack operation in the format: "Push X" where X is the index of the node being pushed onto the stack; or "Pop" meaning to pop one node from the stack.
Output Specification:
For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.
Sample Input:
6
Push 1
Push 2
Push 3
Pop
Pop
Push 4
Pop
Pop
Push 5
Push 6
Pop
Pop
Sample Output:
3 4 2 6 5 1
*/

#include<stack>
#include<cstdio>
#include<string>
#include<iostream>
using namespace std;
int pre[31],in[31],n;
struct node{
	int data;
	node* lchild;
	node* rchild;
};
node* ct(int pl,int pr,int il,int ir){
	if (pl>pr)
		return NULL;
	node* root=new node;
	root->data=pre[pl];
	int k;
	for (k=il;k<=ir;k++){
		if (in[k]==pre[pl])
			break;
	}
	root->lchild=ct (pl+1,pl+k-il,il,k-1);
	root->rchild=ct(pr-ir+k+1,pr,k+1,ir);
	return root;
}
void ppo(node* root){
	if (root==NULL)
		return;
	ppo(root->lchild);
	ppo(root->rchild);
	printf("%d",root->data);
	n--;
	if (n)
		printf(" ");
}
int main(){
	string str;
	int a=0;
	int b=0;
	stack<int> s;
	scanf("%d",&n);
	for (int i=0;i<2*n;i++){
		cin>>str;
		if (str=="Push"){
			scanf("%d",&pre[a]);
			s.push(pre[a]);
			a++;
		}else{
			in[b++]=s.top();
			s.pop();
		}
	}
	ppo(ct(0,n-1,0,n-1));
	return 0;

}
