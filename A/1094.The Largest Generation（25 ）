/*
1094 The Largest Generation（25 分）
A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is to find the generation with the largest population.
Input Specification:
Each input file contains one test case. Each case starts with two positive integers N (<100) which is the total number of family members in the tree (and hence assume that all the members are numbered from 01 to N), and M (<N) which is the number of family members who have children. Then M lines follow, each contains the information of a family member in the following format:
ID K ID[1] ID[2] ... ID[K]
where ID is a two-digit number representing a family member, K (>0) is the number of his/her children, followed by a sequence of two-digit ID's of his/her children. For the sake of simplicity, let us fix the root ID to be 01. All the numbers in a line are separated by a space.
Output Specification:
For each test case, print in one line the largest population number and the level of the corresponding generation. It is assumed that such a generation is unique, and the root level is defined to be 1.
Sample Input:
23 13
21 1 23
01 4 03 02 04 05
03 3 06 07 08
06 2 12 13
13 1 21
08 2 15 16
02 2 09 10
11 2 19 20
17 1 22
05 1 11
07 1 14
09 1 17
10 1 18
Sample Output:
9 4
*/


#include<cstdio>
#include<queue>
#include<vector>
using namespace std;
struct node{
	vector<int> child;
	int g;
	int f;
	node(){
		f=0;
	}
}nod[110];
int n,m;
void cx(int root){
	queue<int> q;
	q.push(root);
	nod[root].g=1;
	while(!q.empty()){
		int t=q.front();
		if (nod[t].child.size()>0){
			for (int i=0;i<nod[t].child.size();i++){
				nod[nod[t].child[i]].g=nod[t].g+1;
				q.push(nod[t].child[i]);
			}
		}
		q.pop();
	}
	int maxg=0;
	int max=0;
	int ge;
	for (int i=1;i<=n;i++){
		if (nod[i].g>maxg)
			maxg=nod[i].g;
	}
	for (int i=1;i<=maxg;i++){
		int mn=0;
		for (int j=1;j<=n;j++){
			if (nod[j].g==i)
				mn++;
		}
		if (max<mn){
			ge=i;
			max=mn;
		}
	}
	printf("%d %d",max,ge);
}
int main(){
	scanf("%d %d",&n,&m);
	for (int i=0;i<m;i++){
		int id,num,c;
		scanf("%d %d",&id,&num);
		for (int j=0;j<num;j++){
			scanf("%d",&c);
			nod[c].f=id;
			nod[id].child.push_back(c);
		}
	}
	int root;
	for (int i=1;i<=n;i++){
		if (nod[i].f==0){
			root=i;
			break;
		}
	}
	cx(root);
	return 0;
}
