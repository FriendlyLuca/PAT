
/*
1028. 人口普查(20)
时间限制 
200 ms
内存限制 
65536 kB
代码长度限制 
8000 B
判题程序 
Standard 
作者 
CHEN, Yue
某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。 
这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过200岁的老人，而今天是2014年9月6日，所以超过200岁的生日和未出生的生日都是不合理的，应该被过滤掉。 
输入格式： 
输入在第一行给出正整数N，取值在(0, 105]；随后N行，每行给出1个人的姓名（由不超过5个英文字母组成的字符串）、以及按“yyyy/mm/dd”（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。 
输出格式： 
在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。 
输入样例：
5
John 2001/05/12
Tom 1814/09/06
Ann 2121/01/30
James 1814/09/05
Steve 1967/11/20
输出样例：
3 Tom John

提交代码 


*/

#include<stdio.h>
int main(){
	struct p{
		char name[6];
		int year;
		int month;
		int day;
		int old;
		int flag;
	}peo[100000],max,min;
	max.old=20140906;
	min.old=18140906;
	int n;
	int num=0;
	scanf("%d",&n);
	for (int i=0;i<n;i++){
		scanf("%s %d/%d/%d",&peo[i].name,&peo[i].year,&peo[i].month,&peo[i].day);
		peo[i].old=peo[i].year*10000+peo[i].month*100+peo[i].day;
		if (peo[i].old<=20140906&&peo[i].old>=18140906&&peo[i].month<13&&peo[i].day<32){
			peo[i].flag=1;
			num++;
		}
		else
			peo[i].flag=0;
		if (peo[i].flag=1&&max.old>=peo[i].old){
			max.old=peo[i].old;
			max.flag=i;//这里用flag来记录年纪最大者的编号，而不是判断是否合理
		}
		if (peo[i].flag=1&&min.old<=peo[i].old){
			min.old=peo[i].old;
			min.flag=i;
		}
	}
	printf("%d %s %s",num,peo[max.flag].name,peo[min.flag].name);
	
}

//one year later
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
struct stu{
	string name;
	int flag;
	int date;
}a[100010];
bool cmp(stu a,stu b){
	if (a.flag!=b.flag)
		return a.flag>b.flag;
	else
		return a.date<b.date;
}
int main(){
	int n,num=0;
	scanf("%d",&n);
	for (int i=0;i<n;i++){
		cin>>a[i].name;
		int y,m,d;		scanf("%d/%d/%d",&y,&m,&d);
		a[i].date=y*10000+m*100+d;
		if (a[i].date<=20140906&&a[i].date>=18140906){
			a[i].flag=1;
			num++;
		}
		else
			a[i].flag=0;
	}
	sort(a,a+n,cmp);
	printf("%d",num);
	if (num){
		printf(" ");//用cout會超時
		cout<<a[0].name<<" "<<a[num-1].name;
	}
	return 0;
}
